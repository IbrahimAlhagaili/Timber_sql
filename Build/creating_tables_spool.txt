SQL> 
SQL> CREATE TABLE Customers (
  2      customer_id NUMBER(20) PRIMARY KEY,
  3      first_name VARCHAR2(50) NOT NULL,
  4      last_name VARCHAR2(50) NOT NULL,
  5      email VARCHAR2(50) NOT NULL UNIQUE CHECK (REGEXP_LIKE(email, '^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$')),
  6      phone_number VARCHAR2(15) NOT NULL
  7  );

Table created.

SQL> 
SQL> CREATE TABLE Suppliers (
  2      supplier_id NUMBER(20) PRIMARY KEY,
  3      supplier_name VARCHAR2(50) NOT NULL,
  4      supplier_address VARCHAR2(150) NOT NULL,
  5      supplier_email VARCHAR2(50) NOT NULL UNIQUE CHECK (REGEXP_LIKE(supplier_email,'^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$')),
  6      supplier_phone_number VARCHAR2(15) NOT NULL,
  7      products_available NUMBER(10) NOT NULL CHECK (products_available >= 0)
  8  );

Table created.

SQL> 
SQL> CREATE TABLE Category (
  2      category_id NUMBER(20) PRIMARY KEY,
  3      category_name VARCHAR2(50) NOT NULL UNIQUE
  4  );

Table created.

SQL> 
SQL> CREATE TABLE SubCategory (
  2      sub_category_id NUMBER(20) PRIMARY KEY,
  3      sub_category_name VARCHAR2(50),
  4      category_id NUMBER(20),
  5      CONSTRAINT fk_category_subcategory FOREIGN KEY (category_id) REFERENCES Category(category_id)
  6  );

Table created.

SQL> 
SQL> CREATE TABLE Products (
  2      product_id NUMBER(20) PRIMARY KEY,
  3      product_name VARCHAR2(50) NOT NULL,
  4      product_description VARCHAR2(500) NOT NULL,
  5      product_weight NUMBER(10,2) NOT NULL CHECK (product_weight > 0),
  6      category_id NUMBER(20) NOT NULL,
  7      price NUMBER(10,2) NOT NULL CHECK (price > 0),
  8      product_stock NUMBER(10) NOT NULL CHECK (product_stock >= 1),
  9      CONSTRAINT fk_category_products FOREIGN KEY (category_id) REFERENCES Category(category_id)
 10  );

Table created.

SQL> 
SQL> CREATE TABLE ProductSupplierBridge (
  2      product_id NUMBER(20),
  3      supplier_id NUMBER(20),
  4      CONSTRAINT pk_product_supplier PRIMARY KEY (product_id, supplier_id),
  5      CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES Products(product_id),
  6      CONSTRAINT fk_supplier FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)
  7  );

Table created.

SQL> --Modified review message to make it longer
SQL> CREATE TABLE Reviews (
  2      review_id NUMBER(20) PRIMARY KEY,
  3      customer_id NUMBER(20),
  4      product_id NUMBER(20),
  5      review_date DATE,
  6      review_message VARCHAR2(100),
  7      rating NUMBER(4,1),
  8      CONSTRAINT fk_customer_reviews FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  9      CONSTRAINT fk_product_reviews FOREIGN KEY (product_id) REFERENCES Products(product_id)
 10  );

Table created.

SQL> 
SQL> CREATE TABLE Location (
  2      location_id NUMBER(20),
  3      street_address VARCHAR2(150) NOT NULL,
  4      province VARCHAR2(20) NOT NULL,
  5      city VARCHAR2(20) NOT NULL,
  6      postal_code VARCHAR2(7) NOT NULL CHECK (REGEXP_LIKE(postal_code, '^[A-Z]\d[A-Z]\d[A-Z]\d$'))
  7  );

Table created.

SQL> 
SQL> -- Creating the location table using the Alter Table command to add constraints
SQL> ALTER TABLE Location
  2  ADD CONSTRAINT location_pk PRIMARY KEY (location_id);

Table altered.

SQL> 
SQL> CREATE TABLE Orders (
  2      order_id NUMBER(20) PRIMARY KEY,
  3      customer_id NUMBER(20),
  4      order_date DATE NOT NULL,
  5      location_id NUMBER(20),
  6      quantity_ordered NUMBER(10) NOT NULL CHECK (quantity_ordered > 0),
  7      CONSTRAINT fk_customer_orders FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  8      CONSTRAINT fk_location_orders FOREIGN KEY (location_id) REFERENCES Location(location_id)
  9  );

Table created.

SQL> 
SQL> CREATE TABLE OrderProductBridge (
  2      product_id NUMBER(20),
  3      order_id NUMBER(20),
  4      CONSTRAINT pk_order_product PRIMARY KEY (product_id, order_id),
  5      CONSTRAINT fk_product_1 FOREIGN KEY (product_id) REFERENCES Products(product_id),
  6      CONSTRAINT fk_order FOREIGN KEY (order_id) REFERENCES Orders(order_id)
  7  );

Table created.

SQL> 
SQL> CREATE TABLE Shipping (
  2      shipping_id NUMBER(20),
  3      location_id NUMBER(20) NOT NULL,
  4      date_shipped DATE NOT NULL,
  5      free_shipping NUMBER(1),
  6      shipping_rate NUMBER(5,2) NOT NULL,
  7      high_priority NUMBER(1)
  8  );

Table created.

SQL> 
SQL> ALTER TABLE Shipping
  2  ADD CONSTRAINT chk_free_shipping CHECK (free_shipping IN (0,1))
  3  ADD CONSTRAINT chk_high_priority CHECK (high_priority IN (0,1))
  4  ADD CONSTRAINT pk_shipping PRIMARY KEY (shipping_id)
  5  ADD CONSTRAINT fk_location_shipping FOREIGN KEY (location_id) REFERENCES Location(location_id);

Table altered.

SQL> 
SQL> CREATE TABLE Taxes (
  2      tax_id NUMBER(20),
  3      location_id NUMBER(20) NOT NULL,
  4      provincial_tax_rate NUMBER(5,2) NOT NULL,
  5      federal_tax_rate NUMBER(5,2) NOT NULL,
  6      hst NUMBER(5,2),
  7      gst NUMBER(5,2)
  8  );

Table created.

SQL> 
SQL> ALTER TABLE Taxes
  2  ADD CONSTRAINT chk_provincial_tax CHECK (provincial_tax_rate > 0)
  3  ADD CONSTRAINT chk_federal_tax CHECK (federal_tax_rate > 0)
  4  ADD CONSTRAINT chk_hst CHECK (hst > 0)
  5  ADD CONSTRAINT chk_gst CHECK (gst > 0)
  6  ADD CONSTRAINT pk_taxes PRIMARY KEY (tax_id)
  7  ADD CONSTRAINT fk_location_tax FOREIGN KEY (location_id) REFERENCES Location(location_id);

Table altered.

SQL> 
SQL> CREATE TABLE Payments (
  2      payment_id NUMBER(20),
  3      shipping_id NUMBER(20) NOT NULL,
  4      payment_amount NUMBER(10,2) NOT NULL,
  5      date_paid DATE NOT NULL,
  6      payment_type VARCHAR2(50) NOT NULL,
  7      tax_id NUMBER(20) NOT NULL,
  8      order_id NUMBER(20) NOT NULL
  9  );

Table created.

SQL> 
SQL> ALTER TABLE Payments
  2  ADD CONSTRAINT pk_payment PRIMARY KEY (payment_id)
  3  ADD CONSTRAINT fk_shipping_id FOREIGN KEY (shipping_id) REFERENCES Shipping(shipping_id)
  4  ADD CONSTRAINT fk_order_id FOREIGN KEY (order_id) REFERENCES Orders (order_id)
  5  ADD CONSTRAINT fk_tax_id FOREIGN KEY (tax_id) REFERENCES Taxes (tax_id)
  6  ADD CONSTRAINT chk_payment_amount CHECK (payment_amount > 0)
  7  ADD CONSTRAINT chk_payment_type CHECK (payment_type IN ('Visa', 'Mastercard', 'Amex', 'Debit'));

Table altered.

SQL> 
SQL> SPOOL OFF
